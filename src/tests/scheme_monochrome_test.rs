use crate::{
    dynamiccolor::material_dynamic_colors::MaterialDynamicColors, hct::hct::Hct,
    scheme::scheme_monochrome::SchemeMonochrome,
};

#[test]
fn dark_theme_monochrome_spec() {
    let scheme = SchemeMonochrome::new(Hct::from_int(0xff0000ff), true, 0.0).dynamic_scheme;
    assert_approx_eq::assert_approx_eq!(
        MaterialDynamicColors::primary().get_hct(&scheme).get_tone(),
        100.0,
        1.0
    );
    assert_approx_eq::assert_approx_eq!(
        MaterialDynamicColors::on_primary()
            .get_hct(&scheme)
            .get_tone(),
        10.0,
        1.0
    );
    assert_approx_eq::assert_approx_eq!(
        MaterialDynamicColors::primary_container()
            .get_hct(&scheme)
            .get_tone(),
        85.0,
        1.0
    );
    assert_approx_eq::assert_approx_eq!(
        MaterialDynamicColors::on_primary_container()
            .get_hct(&scheme)
            .get_tone(),
        0.0,
        1.0
    );
    assert_approx_eq::assert_approx_eq!(
        MaterialDynamicColors::secondary()
            .get_hct(&scheme)
            .get_tone(),
        80.0,
        1.0
    );
    assert_approx_eq::assert_approx_eq!(
        MaterialDynamicColors::on_secondary()
            .get_hct(&scheme)
            .get_tone(),
        10.0,
        1.0
    );
    assert_approx_eq::assert_approx_eq!(
        MaterialDynamicColors::secondary_container()
            .get_hct(&scheme)
            .get_tone(),
        30.0,
        1.0
    );
    assert_approx_eq::assert_approx_eq!(
        MaterialDynamicColors::on_secondary_container()
            .get_hct(&scheme)
            .get_tone(),
        90.0,
        1.0
    );
    assert_approx_eq::assert_approx_eq!(
        MaterialDynamicColors::tertiary()
            .get_hct(&scheme)
            .get_tone(),
        90.0,
        1.0
    );
    assert_approx_eq::assert_approx_eq!(
        MaterialDynamicColors::on_tertiary()
            .get_hct(&scheme)
            .get_tone(),
        10.0,
        1.0
    );
    assert_approx_eq::assert_approx_eq!(
        MaterialDynamicColors::tertiary_container()
            .get_hct(&scheme)
            .get_tone(),
        60.0,
        1.0
    );
    assert_approx_eq::assert_approx_eq!(
        MaterialDynamicColors::on_tertiary_container()
            .get_hct(&scheme)
            .get_tone(),
        0.0,
        1.0
    );
}

#[test]
fn light_theme_monochrome_spec() {
    let scheme = SchemeMonochrome::new(Hct::from_int(0xff0000ff), false, 0.0).dynamic_scheme;
    assert_approx_eq::assert_approx_eq!(
        MaterialDynamicColors::primary().get_hct(&scheme).get_tone(),
        0.0,
        1.0
    );
    assert_approx_eq::assert_approx_eq!(
        MaterialDynamicColors::on_primary()
            .get_hct(&scheme)
            .get_tone(),
        90.0,
        1.0
    );
    assert_approx_eq::assert_approx_eq!(
        MaterialDynamicColors::primary_container()
            .get_hct(&scheme)
            .get_tone(),
        25.0,
        1.0
    );
    assert_approx_eq::assert_approx_eq!(
        MaterialDynamicColors::on_primary_container()
            .get_hct(&scheme)
            .get_tone(),
        100.0,
        1.0
    );
    assert_approx_eq::assert_approx_eq!(
        MaterialDynamicColors::secondary()
            .get_hct(&scheme)
            .get_tone(),
        40.0,
        1.0
    );
    assert_approx_eq::assert_approx_eq!(
        MaterialDynamicColors::on_secondary()
            .get_hct(&scheme)
            .get_tone(),
        100.0,
        1.0
    );
    assert_approx_eq::assert_approx_eq!(
        MaterialDynamicColors::secondary_container()
            .get_hct(&scheme)
            .get_tone(),
        85.0,
        1.0
    );
    assert_approx_eq::assert_approx_eq!(
        MaterialDynamicColors::on_secondary_container()
            .get_hct(&scheme)
            .get_tone(),
        10.0,
        1.0
    );
    assert_approx_eq::assert_approx_eq!(
        MaterialDynamicColors::tertiary()
            .get_hct(&scheme)
            .get_tone(),
        25.0,
        1.0
    );
    assert_approx_eq::assert_approx_eq!(
        MaterialDynamicColors::on_tertiary()
            .get_hct(&scheme)
            .get_tone(),
        90.0,
        1.0
    );
    assert_approx_eq::assert_approx_eq!(
        MaterialDynamicColors::tertiary_container()
            .get_hct(&scheme)
            .get_tone(),
        49.0,
        1.0
    );
    assert_approx_eq::assert_approx_eq!(
        MaterialDynamicColors::on_tertiary_container()
            .get_hct(&scheme)
            .get_tone(),
        100.0,
        1.0
    );
}
